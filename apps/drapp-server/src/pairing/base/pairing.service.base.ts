/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Pairing as PrismaPairing,
  Mentee as PrismaMentee,
  Mentor as PrismaMentor,
} from "@prisma/client";

export class PairingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PairingCountArgs, "select">): Promise<number> {
    return this.prisma.pairing.count(args);
  }

  async pairings(args: Prisma.PairingFindManyArgs): Promise<PrismaPairing[]> {
    return this.prisma.pairing.findMany(args);
  }
  async pairing(
    args: Prisma.PairingFindUniqueArgs
  ): Promise<PrismaPairing | null> {
    return this.prisma.pairing.findUnique(args);
  }
  async createPairing(args: Prisma.PairingCreateArgs): Promise<PrismaPairing> {
    return this.prisma.pairing.create(args);
  }
  async updatePairing(args: Prisma.PairingUpdateArgs): Promise<PrismaPairing> {
    return this.prisma.pairing.update(args);
  }
  async deletePairing(args: Prisma.PairingDeleteArgs): Promise<PrismaPairing> {
    return this.prisma.pairing.delete(args);
  }

  async getMentee(parentId: string): Promise<PrismaMentee | null> {
    return this.prisma.pairing
      .findUnique({
        where: { id: parentId },
      })
      .mentee();
  }

  async getMentor(parentId: string): Promise<PrismaMentor | null> {
    return this.prisma.pairing
      .findUnique({
        where: { id: parentId },
      })
      .mentor();
  }
}
