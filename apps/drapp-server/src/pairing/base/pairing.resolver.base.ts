/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pairing } from "./Pairing";
import { PairingCountArgs } from "./PairingCountArgs";
import { PairingFindManyArgs } from "./PairingFindManyArgs";
import { PairingFindUniqueArgs } from "./PairingFindUniqueArgs";
import { CreatePairingArgs } from "./CreatePairingArgs";
import { UpdatePairingArgs } from "./UpdatePairingArgs";
import { DeletePairingArgs } from "./DeletePairingArgs";
import { Mentee } from "../../mentee/base/Mentee";
import { Mentor } from "../../mentor/base/Mentor";
import { PairingService } from "../pairing.service";
@graphql.Resolver(() => Pairing)
export class PairingResolverBase {
  constructor(protected readonly service: PairingService) {}

  async _pairingsMeta(
    @graphql.Args() args: PairingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pairing])
  async pairings(
    @graphql.Args() args: PairingFindManyArgs
  ): Promise<Pairing[]> {
    return this.service.pairings(args);
  }

  @graphql.Query(() => Pairing, { nullable: true })
  async pairing(
    @graphql.Args() args: PairingFindUniqueArgs
  ): Promise<Pairing | null> {
    const result = await this.service.pairing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pairing)
  async createPairing(
    @graphql.Args() args: CreatePairingArgs
  ): Promise<Pairing> {
    return await this.service.createPairing({
      ...args,
      data: {
        ...args.data,

        mentee: args.data.mentee
          ? {
              connect: args.data.mentee,
            }
          : undefined,

        mentor: args.data.mentor
          ? {
              connect: args.data.mentor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Pairing)
  async updatePairing(
    @graphql.Args() args: UpdatePairingArgs
  ): Promise<Pairing | null> {
    try {
      return await this.service.updatePairing({
        ...args,
        data: {
          ...args.data,

          mentee: args.data.mentee
            ? {
                connect: args.data.mentee,
              }
            : undefined,

          mentor: args.data.mentor
            ? {
                connect: args.data.mentor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pairing)
  async deletePairing(
    @graphql.Args() args: DeletePairingArgs
  ): Promise<Pairing | null> {
    try {
      return await this.service.deletePairing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Mentee, {
    nullable: true,
    name: "mentee",
  })
  async getMentee(@graphql.Parent() parent: Pairing): Promise<Mentee | null> {
    const result = await this.service.getMentee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Mentor, {
    nullable: true,
    name: "mentor",
  })
  async getMentor(@graphql.Parent() parent: Pairing): Promise<Mentor | null> {
    const result = await this.service.getMentor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
