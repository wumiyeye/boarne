/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Mentor as PrismaMentor,
  Pairing as PrismaPairing,
  User as PrismaUser,
} from "@prisma/client";

export class MentorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MentorCountArgs, "select">): Promise<number> {
    return this.prisma.mentor.count(args);
  }

  async mentors(args: Prisma.MentorFindManyArgs): Promise<PrismaMentor[]> {
    return this.prisma.mentor.findMany(args);
  }
  async mentor(
    args: Prisma.MentorFindUniqueArgs
  ): Promise<PrismaMentor | null> {
    return this.prisma.mentor.findUnique(args);
  }
  async createMentor(args: Prisma.MentorCreateArgs): Promise<PrismaMentor> {
    return this.prisma.mentor.create(args);
  }
  async updateMentor(args: Prisma.MentorUpdateArgs): Promise<PrismaMentor> {
    return this.prisma.mentor.update(args);
  }
  async deleteMentor(args: Prisma.MentorDeleteArgs): Promise<PrismaMentor> {
    return this.prisma.mentor.delete(args);
  }

  async findPairings(
    parentId: string,
    args: Prisma.PairingFindManyArgs
  ): Promise<PrismaPairing[]> {
    return this.prisma.mentor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pairings(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.mentor
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
