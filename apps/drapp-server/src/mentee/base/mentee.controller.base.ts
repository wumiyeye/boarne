/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MenteeService } from "../mentee.service";
import { MenteeCreateInput } from "./MenteeCreateInput";
import { Mentee } from "./Mentee";
import { MenteeFindManyArgs } from "./MenteeFindManyArgs";
import { MenteeWhereUniqueInput } from "./MenteeWhereUniqueInput";
import { MenteeUpdateInput } from "./MenteeUpdateInput";
import { PairingFindManyArgs } from "../../pairing/base/PairingFindManyArgs";
import { Pairing } from "../../pairing/base/Pairing";
import { PairingWhereUniqueInput } from "../../pairing/base/PairingWhereUniqueInput";

export class MenteeControllerBase {
  constructor(protected readonly service: MenteeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mentee })
  async createMentee(@common.Body() data: MenteeCreateInput): Promise<Mentee> {
    return await this.service.createMentee({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Mentee] })
  @ApiNestedQuery(MenteeFindManyArgs)
  async mentees(@common.Req() request: Request): Promise<Mentee[]> {
    const args = plainToClass(MenteeFindManyArgs, request.query);
    return this.service.mentees({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mentee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mentee(
    @common.Param() params: MenteeWhereUniqueInput
  ): Promise<Mentee | null> {
    const result = await this.service.mentee({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mentee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMentee(
    @common.Param() params: MenteeWhereUniqueInput,
    @common.Body() data: MenteeUpdateInput
  ): Promise<Mentee | null> {
    try {
      return await this.service.updateMentee({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mentee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMentee(
    @common.Param() params: MenteeWhereUniqueInput
  ): Promise<Mentee | null> {
    try {
      return await this.service.deleteMentee({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/pairings")
  @ApiNestedQuery(PairingFindManyArgs)
  async findPairings(
    @common.Req() request: Request,
    @common.Param() params: MenteeWhereUniqueInput
  ): Promise<Pairing[]> {
    const query = plainToClass(PairingFindManyArgs, request.query);
    const results = await this.service.findPairings(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        mentee: {
          select: {
            id: true,
          },
        },

        mentor: {
          select: {
            id: true,
          },
        },

        pairedAt: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pairings")
  async connectPairings(
    @common.Param() params: MenteeWhereUniqueInput,
    @common.Body() body: PairingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pairings: {
        connect: body,
      },
    };
    await this.service.updateMentee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pairings")
  async updatePairings(
    @common.Param() params: MenteeWhereUniqueInput,
    @common.Body() body: PairingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pairings: {
        set: body,
      },
    };
    await this.service.updateMentee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pairings")
  async disconnectPairings(
    @common.Param() params: MenteeWhereUniqueInput,
    @common.Body() body: PairingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pairings: {
        disconnect: body,
      },
    };
    await this.service.updateMentee({
      where: params,
      data,
      select: { id: true },
    });
  }
}
