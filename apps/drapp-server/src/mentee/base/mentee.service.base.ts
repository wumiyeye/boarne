/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Mentee as PrismaMentee,
  Pairing as PrismaPairing,
  User as PrismaUser,
} from "@prisma/client";

export class MenteeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MenteeCountArgs, "select">): Promise<number> {
    return this.prisma.mentee.count(args);
  }

  async mentees(args: Prisma.MenteeFindManyArgs): Promise<PrismaMentee[]> {
    return this.prisma.mentee.findMany(args);
  }
  async mentee(
    args: Prisma.MenteeFindUniqueArgs
  ): Promise<PrismaMentee | null> {
    return this.prisma.mentee.findUnique(args);
  }
  async createMentee(args: Prisma.MenteeCreateArgs): Promise<PrismaMentee> {
    return this.prisma.mentee.create(args);
  }
  async updateMentee(args: Prisma.MenteeUpdateArgs): Promise<PrismaMentee> {
    return this.prisma.mentee.update(args);
  }
  async deleteMentee(args: Prisma.MenteeDeleteArgs): Promise<PrismaMentee> {
    return this.prisma.mentee.delete(args);
  }

  async findPairings(
    parentId: string,
    args: Prisma.PairingFindManyArgs
  ): Promise<PrismaPairing[]> {
    return this.prisma.mentee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pairings(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.mentee
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
